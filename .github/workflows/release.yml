name: Release

# When its time to do a release do a full cross platform build for all supported
# architectures and push all of them to Docker Hub.
# Only trigger on semver shaped tags.
on:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        node:
          - 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        id: prepare
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            # Strip "v" prefix from tag name
            VERSION=$(echo $VERSION | sed -e 's/^v//')
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - name: Setting up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Install pnpm
        uses: pnpm/action-setup@v2
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install

      - name: Run build
        run: pnpm run build

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: v${{ steps.prepare.outputs.VERSION }}
          path: dist

  dockerize:
    runs-on: ubuntu-22.04
    needs:
      - build
    env:
      DOCKER_IMAGE: ghcr.io/oanhnn/vue3-starter
    strategy:
      fail-fast: false
      matrix:
        node:
          - 20
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare
        id: prepare
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            # Strip "v" prefix from tag name
            VERSION=$(echo $VERSION | sed -e 's/^v//')
          fi
          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT
          echo "TAGS=${DOCKER_IMAGE}:${VERSION}" >> $GITHUB_OUTPUT
          echo "CREATED=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT

      - name: Download artfact
        uses: actions/download-artifact@v3
        with:
          name: v${{ steps.prepare.outputs.VERSION }}
          path: dist

      - name: Setting up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all

      - name: Setting up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v5
        with:
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          context: .
          file: ./Dockerfile
          target: deploy-ci
          labels: |
            org.opencontainers.image.title='The example vite4 + vue3 + tailwind2'
            org.opencontainers.image.authors=oanhnn
            org.opencontainers.image.created=${{ steps.prepare.outputs.CREATED }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.version=${{ steps.prepare.outputs.VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=${{ github.event.repository.license.name }}
          platforms: |
            linux/amd64
            linux/arm64
          pull: true
          push: true
          tags: ${{ steps.prepare.outputs.TAGS }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
